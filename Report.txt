name: Justin Alexis
nedId: jmalexis
id: 89335275
Major: Computer Science

queries:

1. computer science
- did decently. 
- benefits: typically contained one of the headers <h1,h2,h3,h4,h5,h6,strong>
	thus, although the retrieval time was average, it was ranked fairly highly

- problems: nothing in particular

2. 0
- the fastest query time possible, this is so fast because it is the very first index in the
	inverted index, HOWEVER, the downside is that the results are middling and inaccurate
	or even outright random whereas google might actually give nice information on the 
	topic and origin of "0"
- benefits: speed
- problems: accuracy

3. alone31 forever 34alone
- The query gives results for the word "forever". It does not properly stem "alone" due to the
	stemmer used, PorterStemmer. A more advanced search optimization tactic would decipher the 
	meaning behind what is being said
- problems: "alone31" gives the result alone31 and "34alone" gives 34alon. Ideally, "alone" would stem
	to alon and thus ideally the stemmer would ignore the existence of numbers in words of a certain length.
	However, this would destory queries like "21Savage" or words like "401k"where the 21 
	and 401 are actually part of the query and are essential to understanding the meaning

4. hello world
- one query term is weighted far higher than the other
- The general methodology of the algorithm utilized was to prioritize headers above everything, then count after
- This can lead to problems because the results lean heavily on the side of "world" because it has a 
- higher chance to be a header. On the flip side, making the algorithm weigh words using log()
- makes the query more accurate because the rarity of hello is not outweighed by the frequency of world

5. 10 + 5 + 10 * 30
- This query actually does terribly. One of the problems; albeit, out of our control, is that the query
- 	cannot actually get the operators of the query because we assume the user is unintelligent and does not
- 	use advanced tactics like booleans or operators.
- benefits: decent, quick, and relevant information on the query related to each INDIVIDUAL number
- problems: the query does not contextualize the information, it simply looks for where it might be located
	in the inverted Index

6. to be or not to be
- this query is inaccurate because the positional information of the query does not outweigh the header/count
	information and value
- The query can be improved by remembering the positional importance of each element rather than immediately
	sorting them for efficiency, then comparing the positions 

7. I'm addicted to video games plz halp
- This query fails to identify plz and halp on a large scale (it fails to get substantial results)
- Ideally, plz would simplify to please and halp would return help
- The search engine also does not identify I'm properly, I'm -> (I & m) not (Im)

8. www.google.com
- This query reveals another flaw with the search engine, what if the value given is a direct link?
- Ideally, this would mean one of the top options is the given link; however,
- we reterive three different results with this search. We can improve this by directly getting/going to
- the given link if we are capable of getting it and it starts with "www."

9. Information Reterival
- This query does average, nothing is out of the ordinary, we get results that prioritize
- header with Information and Reterival. 

10. helloworld
- This query does terribly.
- What makes it bad is that the search engine cannot decipher the text given into parts that are
- more comphrehensible or have more meaning. Perhaps we can use the position and stemming techniques
- to cut the word or find the word within other words to get better results

11. zzzzzzzz
- The following query is actually quite slow. This is because unlike all the other queries above,
- "zzzzzzzz" actually needs to traverse the entire inverted index, we could speed up this process through 2 ways
	- we could read more from the disk, for example, read thousands of lines rather than 1 by 1 and 
		then hash it
	- or we could seek out the position nearby the query

12. random query entered this is some cool text for it
- The following query is not very optimal compared to what it should be
- The reasoning is because the algorithm has to iterate through the string multiple times to compute
- the value of the postings. We can increase the efficency by using a hashMap rather than a list and
- adding the extra Postings be the values of the hash
- This speeds up query time significantly

13. Counter Strike League of Legends Genshin
- The following query is decent
- The words are unique enough to give good results and to be ranked in an appropriate fashion

14. 2017
- The following query gives suprisingly good results
- This is because unlike the number "0", 2017 has better headers like <strong> in the database
- and the links are less arbitrary because 2017 is a more general number that inherently contains information
- and meaning

15. covid-19
- I expected the query to be inaccurate and flawed. This query is not as innacurate as I expected though.
- This is because the name covid is subtley associated with covid-19 since they appear in headers together
- Thus, the queries we get have a suprisingly okay result.

16. problems with A.C. at U.C.I.
- This query did extremely horrendous. Most of the reason why is that positional value is not weighted when
- A and C are placed in proximity, similar to UCI. This gives lackluster results in terms of quality.
- In addition, since the words are split up, the search engine needs to work harder to find each individual term

17. 911
- This query is suprisingly not as good as I had expected. Part of the problem with the search engine in this
- scenario is that 911 is not common in many headers and the count is not useful either.

18. rumination in the nation's nation
- This query is good. On the downside, we use a dead word "the"
- We should try and weigh these words to be less than what they are because of how common and useless it is

19. re.findall(^h{1-6}|^strong&)
- This query is absolutely terrible. This is because it gets each individual option and searches for it; however,
- the actual results are not nice because all the words, unlike some of the other queries, are far more 
- logically unrelated. Thus, rather than getting anything valueable, we just get a bunch of queries that had
- strong and findall as the header and shuttled those few results to the top

20. python requirements grade
- This query is not bad. Since the words are generic enough for enough valueable documents to have them but also 
- niche enough to be headers/strong, which is primarily what was used in the algorithm








